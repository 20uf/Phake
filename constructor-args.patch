From 3055bd432ce8b37a3d1944cdb526deaaa52e46bf Mon Sep 17 00:00:00 2001
From: Brian Feaver <brian.feaver@gmail.com>
Date: Fri, 2 Aug 2013 21:36:28 -0700
Subject: [PATCH] Preserve original constructor. Fixes #62. Fixes #107.

---
 src/Phake/ClassGenerator/MockClass.php   | 69 ++++++++++++++++++--------------
 tests/PhakeTest.php                      |  6 +++
 tests/PhakeTest/ConstructorInterface.php |  6 +++
 3 files changed, 50 insertions(+), 31 deletions(-)
 create mode 100644 tests/PhakeTest/ConstructorInterface.php

diff --git a/src/Phake/ClassGenerator/MockClass.php b/src/Phake/ClassGenerator/MockClass.php
index cecc204..b925605 100644
--- a/src/Phake/ClassGenerator/MockClass.php
+++ b/src/Phake/ClassGenerator/MockClass.php
@@ -179,37 +179,14 @@ class {$newClassName} {$extends}
 	
 	public \$__PHAKE_name;
 	
-	private \$__PHAKE_handlerChain;
+	public \$__PHAKE_handlerChain;
 
-	public function __construct(Phake_CallRecorder_Recorder \$callRecorder, Phake_Stubber_StubMapper \$stubMapper, Phake_Stubber_IAnswer \$defaultAnswer, array \$constructorArgs = null)
-	{
-		\$this->__PHAKE_callRecorder = \$callRecorder;
-		\$this->__PHAKE_stubMapper = \$stubMapper;
-		\$this->__PHAKE_defaultAnswer = \$defaultAnswer;
-		\$this->__PHAKE_isFrozen = FALSE;
-		\$this->__PHAKE_name = '{$mockedClassName}';
-		\$this->__PHAKE_handlerChain = new Phake_ClassGenerator_InvocationHandler_Composite(array(
-			new Phake_ClassGenerator_InvocationHandler_FrozenObjectCheck(new Phake_MockReader()),
-			new Phake_ClassGenerator_InvocationHandler_CallRecorder(new Phake_MockReader()),
-			new Phake_ClassGenerator_InvocationHandler_MagicCallRecorder(new Phake_MockReader()),
-			new Phake_ClassGenerator_InvocationHandler_StubCaller(new Phake_MockReader()),
-		));
-
-		
-		\$this->__PHAKE_stubMapper->mapStubToMatcher(
-			new Phake_Stubber_AnswerCollection(new Phake_Stubber_Answers_StaticAnswer('Mock for {$mockedClassName}')), 
-			new Phake_Matchers_MethodMatcher('__toString', array())
-		);
+	public function __destruct() {}
 
-		\$this->__PHAKE_stubMapper->mapStubToMatcher(
-			new Phake_Stubber_AnswerCollection(new Phake_Stubber_Answers_StaticAnswer(NULL)),
-			new Phake_Matchers_AbstractMethodMatcher(new ReflectionClass('{$mockedClassName}'))
-		);
-			
-		{$this->getConstructorChaining($mockedClass)}
+	public function __PHAKE_getMockedClassName()
+	{
+	    return '{$mockedClassName}';
 	}
-	
-	public function __destruct() {}
 
 	{$this->generateMockedMethods($mockedClass, $interfaces)}
 }
@@ -236,7 +213,37 @@ class {$newClassName} {$extends}
         Phake_Stubber_IAnswer $defaultAnswer,
         array $constructorArgs = null
     ) {
-        return new $newClassName($recorder, $mapper, $defaultAnswer, $constructorArgs);
+        $mockObject = unserialize(sprintf('O:%d:"%s":0:{}', strlen($newClassName), $newClassName));
+
+        $mockObject->__PHAKE_callRecorder = $recorder;
+        $mockObject->__PHAKE_stubMapper = $mapper;
+        $mockObject->__PHAKE_defaultAnswer = $defaultAnswer;
+        $mockObject->__PHAKE_isFrozen = false;
+        $mockObject->__PHAKE_name = $mockObject->__PHAKE_getMockedClassName();
+
+        $mockObject->__PHAKE_handlerChain = new Phake_ClassGenerator_InvocationHandler_Composite(array(
+			new Phake_ClassGenerator_InvocationHandler_FrozenObjectCheck(new Phake_MockReader()),
+			new Phake_ClassGenerator_InvocationHandler_CallRecorder(new Phake_MockReader()),
+			new Phake_ClassGenerator_InvocationHandler_MagicCallRecorder(new Phake_MockReader()),
+			new Phake_ClassGenerator_InvocationHandler_StubCaller(new Phake_MockReader()),
+		));
+
+        $mockObject->__PHAKE_stubMapper->mapStubToMatcher(
+			new Phake_Stubber_AnswerCollection(new Phake_Stubber_Answers_StaticAnswer('Mock for ' . $mockObject->__PHAKE_getMockedClassName())),
+			new Phake_Matchers_MethodMatcher('__toString', array())
+		);
+
+        $mockObject->__PHAKE_stubMapper->mapStubToMatcher(
+			new Phake_Stubber_AnswerCollection(new Phake_Stubber_Answers_StaticAnswer(NULL)),
+			new Phake_Matchers_AbstractMethodMatcher(new ReflectionClass($mockObject->__PHAKE_getMockedClassName()))
+		);
+
+        $mockReflClass = new ReflectionClass($mockObject);
+        if (null !== $constructorArgs && $mockReflClass->hasMethod('__construct')) {
+            call_user_func_array(array($mockObject, '__construct'), $constructorArgs);
+        }
+
+        return $mockObject;
     }
 
     /**
@@ -254,8 +261,8 @@ class {$newClassName} {$extends}
 
         $implementedMethods = $this->reservedWords;
         foreach ($mockedClass->getMethods($filter) as $method) {
-            if (!$method->isConstructor() && !$method->isDestructor() && !$method->isFinal() && !$method->isStatic(
-            ) && !in_array($method->getName(), $implementedMethods)
+            if (!$method->isConstructor() && !$method->isDestructor() && !$method->isFinal() && !$method->isStatic()
+                && !in_array($method->getName(), $implementedMethods)
             ) {
                 $implementedMethods[] = $method->getName();
                 $methodDefs .= $this->implementMethod($method) . "\n";
diff --git a/tests/PhakeTest.php b/tests/PhakeTest.php
index 9be7ce1..382cc2f 100644
--- a/tests/PhakeTest.php
+++ b/tests/PhakeTest.php
@@ -1259,4 +1259,10 @@ class PhakeTest extends PHPUnit_Framework_TestCase
 
         Phake::verify($mock)->__get($this->anything());
     }
+
+    public function testConstructorInterfaceCanBeMocked()
+    {
+        // Generated a fatal error before fixed
+        $this->assertInstanceOf('Phake_IMock', Phake::mock('PhakeTest_ConstructorInterface'));
+    }
 }
diff --git a/tests/PhakeTest/ConstructorInterface.php b/tests/PhakeTest/ConstructorInterface.php
new file mode 100644
index 0000000..c22542b
--- /dev/null
+++ b/tests/PhakeTest/ConstructorInterface.php
@@ -0,0 +1,6 @@
+<?php
+
+interface PhakeTest_ConstructorInterface
+{
+    public function __construct(PhakeTest_A $a);
+}
-- 
1.8.4.2

